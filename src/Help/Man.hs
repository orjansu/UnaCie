
-- This file has been automatically generated using ManGen.hs.

module Man (lookupMan) where

lookupMan :: String -> Maybe [String]
lookupMan s = case s of
  "add-lib"              -> Just addLibCmd
  "beta"                 -> Just betaCmd
  "beta-all"             -> Just betaAllCmd
  "define"               -> Just defineCmd
  "del-lib"              -> Just delLibCmd
  "end-trans"            -> Just endTransCmd
  "exit-script"          -> Just exitScriptCmd
  "export-lib"           -> Just exportLibCmd
  "export-script"        -> Just exportScriptCmd
  "help"                 -> Just helpCmd
  "HELP_MENU"            -> Just hELP_MENUCmd
  "highlight"            -> Just highlightCmd
  "import-lib"           -> Just importLibCmd
  "import-script"        -> Just importScriptCmd
  "left"                 -> Just leftCmd
  "MODE"                 -> Just mODECmd
  "next"                 -> Just nextCmd
  "next-cmd"             -> Just nextCmdCmd
  "prev"                 -> Just prevCmd
  "prev-cmd"             -> Just prevCmdCmd
  "PROP"                 -> Just pROPCmd
  "quit"                 -> Just quitCmd
  "reload-active-script" -> Just reloadActiveScriptCmd
  "rhs"                  -> Just rhsCmd
  "right"                -> Just rightCmd
  "show-active-script"   -> Just showActiveScriptCmd
  "show-lib"             -> Just showLibCmd
  "show-script"          -> Just showScriptCmd
  "show-scripts"         -> Just showScriptsCmd
  "top"                  -> Just topCmd
  "trans"                -> Just transCmd
  "unbeta"               -> Just unbetaCmd
  "up"                   -> Just upCmd
  "zoom-in"              -> Just zoomInCmd
  "zoom-out"             -> Just zoomOutCmd
  _ -> Nothing


zoomOutCmd :: [String]
zoomOutCmd  =
  [ "\ESC[1mNAME\ESC[m"
  , "        zoom-out - restores focus to the full term but keeps focus"
  , "                   highlighting active."
  , "      "
  , "\ESC[1mSYNOPSIS\ESC[m"
  , "        zoom-out"
  , "     "
  , "\ESC[1mEXAMPLES\ESC[m"
  , "        Turning on focus highlighting, navigating to a let statement's "
  , "        second binding, zooming in, and then zooming out:"
  , "   "
  , "            unie> trans $let { x = 1; y = 2 } in x$"
  , "            let x = 1"
  , "                y = 2"
  , "            in x"
  , "            [1]> highlight ON"
  , "            Info: focus highlighting on."
  , "            \ESC[30m\ESC[48;5;252mlet x = 1\ESC[m"
  , "                \ESC[30m\ESC[48;5;252my = 2\ESC[m"
  , "            \ESC[30m\ESC[48;5;252min x\ESC[m"
  , "            [1]> left"
  , "            \8801"
  , "            let \ESC[30m\ESC[48;5;252mx = 1\ESC[m"
  , "                y = 2"
  , "            in x"
  , "            [2]> next"
  , "            \8801"
  , "            let x = 1"
  , "                \ESC[30m\ESC[48;5;252my = 2\ESC[m"
  , "            in x"
  , "            [3]> zoom-in"
  , "            \ESC[30m\ESC[48;5;252my = 2\ESC[m"
  , "            [3]> zoom-out"
  , "            let x = 1"
  , "                \ESC[30m\ESC[48;5;252my = 2\ESC[m"
  , "            in x"
  , "    "
  , "\ESC[1mNOTES\ESC[m"
  , "        zoom-out is only available when UNIE is in TRANS or TRANSCRIPT "
  , "        MODE, and when focus highlighting is active."
  , "    "
  , "\ESC[1mSEE ALSO\ESC[m"
  , "        MODE, highlight, zoom-in"
  , "    "
  , "    "
  , "October 2017."
  ]

zoomInCmd :: [String]
zoomInCmd  =
  [ "\ESC[1mNAME\ESC[m"
  , "        zoom-in - zooms to the highlighted sub-term."
  , "   "
  , "\ESC[1mSYNOPSIS\ESC[m"
  , "        zoom-in"
  , "   "
  , "\ESC[1mEXAMPLES\ESC[m"
  , "        Turning on focus highlighting, navigating to a let statement's "
  , "        second binding, and then zooming in:"
  , "    "
  , "            unie> trans $let { x = 1; y = 2 } in x$"
  , "            let x = 1"
  , "                y = 2"
  , "            in x"
  , "            [1]> highlight ON"
  , "            Info: focus highlighting on."
  , "            \ESC[30m\ESC[48;5;252mlet x = 1\ESC[m"
  , "                \ESC[30m\ESC[48;5;252my = 2\ESC[m"
  , "            \ESC[30m\ESC[48;5;252min x\ESC[m"
  , "            [1]> left"
  , "            \8801"
  , "            let \ESC[30m\ESC[48;5;252mx = 1\ESC[m"
  , "                y = 2"
  , "            in x"
  , "            [2]> next"
  , "            \8801"
  , "            let x = 1"
  , "                \ESC[30m\ESC[48;5;252my = 2\ESC[m"
  , "            in x"
  , "            [3]> zoom-in"
  , "            \ESC[30m\ESC[48;5;252my = 2\ESC[m"
  , "    "
  , "\ESC[1mNOTES\ESC[m"
  , "        zoom-in is only available when UNIE is in TRANS or TRANSCRIPT "
  , "        MODE, and when focus highlighting is active."
  , "     "
  , "\ESC[1mSEE ALSO\ESC[m"
  , "        MODE, highlight, zoom-out           "
  , "    "
  , "    "
  , "October 2017."
  ]

upCmd :: [String]
upCmd  =
  [ "NAME"
  , "        up - moves the focus to the current node's parent node."
  , "    "
  , "SYNOPSIS"
  , "        up"
  , "    "
  , "DESCRIPTION"
  , "    "
  , "OPTIONS"
  , "    "
  , "EXAMPLES"
  , "        "
  , "        Focussing on a lambda's body, and then the lambda itself:"
  , "            "
  , "            unie> trans $\\x.x$"
  , "            Information: transformation started."
  , "            \\x.x"
  , "            [1]> right"
  , "            \8801 x"
  , "            [2]> up"
  , "            \8801 \\x.x"
  , "    "
  , "        Focussing on the right-hand side of a let binding, and then the let"
  , "        statement itself:"
  , "            "
  , "            unie> trans $let { x = 1; y = 2 } in x$"
  , "            Information: transformation started."
  , "            let x = 1"
  , "                y = 2"
  , "            in x"
  , "            [1]> left"
  , "            \8801 x = 1"
  , "            [2]> rhs"
  , "            \8801 1"
  , "            [3]> up"
  , "            \8801 x = 1"
  , "            [4]> up"
  , "            let x = 1"
  , "                y = 2"
  , "            in x"
  , "    "
  , "NOTES"
  , "        up is only available when UNIE is in TRANS or TRANSCRIPT mode."
  , "    "
  , "SEE ALSO"
  , "        top"
  ]

unbetaCmd :: [String]
unbetaCmd  =
  [ "\ESC[1mNAME\ESC[m    unbeta - beta expansion."
  , "    "
  , "\ESC[1mRELATION\ESC[m "
  , "        cost-equivalent: \8818\8819 "
  , "    "
  , "\ESC[1mSYNOPSIS\ESC[m"
  , "        unbeta TERM_SRC_CODE"
  , "    "
  , "\ESC[1mDESCRIPTION\ESC[m"
  , "        unbeta is used to apply beta expansion. unbeta is opposite to commands "
  , "        beta and beta-all (not just beta), as its parameter can contain "
  , "        a (curried) function with arbitrary arity."
  , "    "
  , "        Note that the command's parameter must be a compatible function "
  , "        application. That is, for a term T currently being transformed, if R "
  , "        reduces to T via one or more applications of beta reduction, then R can "
  , "        be provided as a parameter to unbeta."
  , "   "
  , "\ESC[1mEXAMPLES\ESC[m"
  , "    "
  , "    Correct applications of unbeta:"
  , "    "
  , "        unie> trans $a$"
  , "        a"
  , "        [1]> unbeta $(\955x.x) a$"
  , "        \8818\8819 (\955x.x) a"
  , "    "
  , "        unie> trans $a$"
  , "        a"
  , "        [1]> unbeta $(\955x.\955y.x) a b$"
  , "        \8818\8819 (\955x.\955y.x) a b"
  , "    "
  , "    Incorrect applications of unbeta:"
  , "        "
  , "        unie> trans $a$"
  , "        a"
  , "        [1]> unbeta $foo$"
  , "        Parameter error: not a function application."
  , "    "
  , "        unie> trans $a$"
  , "        a"
  , "        [1]> unbeta $(\955x.\955y.x) a b c$"
  , "        Error: invalid function application [too many arguments]."
  , "    "
  , "        unie> trans $a$"
  , "        a"
  , "        [1]> unbeta $(\955x.\955y.x) 1 2$"
  , "        Error: incompatible function application."
  , "    "
  , "\ESC[1mNOTES\ESC[m"
  , "        unbeta is only available when the system is in TRANS or TRANSCRIPT mode."
  , "    "
  , "\ESC[1mSEE ALSO\ESC[m"
  , "        beta, beta-all"
  ]

transCmd :: [String]
transCmd  =
  [ "\ESC[1mNAME\ESC[m"
  , "        trans - initiates a program transformation."
  , "    "
  , "\ESC[1mSYNOPSIS\ESC[m"
  , "        trans OPTION"
  , "   "
  , "\ESC[1mOPTIONS\ESC[m"
  , "        trans TERM_SRC_CODE"
  , "        trans TERM_SRC_NAME"
  , "        trans PROP"
  , "   "
  , "\ESC[1mEXAMPLES\ESC[m"
  , "        Transformation a simple term:"
  , "    "
  , "            unie> trans $x$"
  , "            Info: transformation started."
  , "            x"
  , "    "
  , "        Transforming a term stored in the library:"
  , "    "
  , "            unie> add-lib $foo = \955x.x$"
  , "            Info: library updated."
  , "            unie> trans 'foo"
  , "            Info: transformation started."
  , "            \955x.x"
  , "    "
  , "        Transforming using a proposition:"
  , "    "
  , "            unie> trans $x$ I $let { x = 1 } in x$"
  , "            Global relation set: \8819"
  , "            Transformation goal set: let x = 1 in x"
  , "            Info: transformation started."
  , "            x"
  , "    "
  , "        Transforming using a proposition that refers to terms"
  , "        stored in the library:"
  , "    "
  , "            unie> add-lib $foo = \955x.x$"
  , "            Info: library updated."
  , "            unie> add-lib $bar = let x = 1 in x$"
  , "            Info: library updated."
  , "            unie> trans 'foo WCE 'bar"
  , "            Global relation set: \10885\10886"
  , "            Transformation goal set: let x = 1 in x"
  , "            Info: transformation started."
  , "            \955x.x"
  , "       "
  , "\ESC[1mNOTES\ESC[m   trans is only available when UNIE is in INITIAL or "
  , "        SCRIPT MODE."
  , "   "
  , "\ESC[1mSEE ALSO\ESC[m"
  , "        MODE, PROP, TERM_SRC_CODE, TERM_SRC_NAME, end-trans"
  , "           "
  , "   "
  , "October 2017."
  ]

topCmd :: [String]
topCmd  =
  [ "NAME"
  , "        top - moves the focus to the top of the tree, i.e., the full term"
  , "              becomes focussed."
  , "    "
  , "SYNOPSIS"
  , "        top"
  , "    "
  , "DESCRIPTION"
  , "    "
  , "OPTIONS"
  , "    "
  , "EXAMPLES"
  , "        "
  , "        Focussing on a binding of a let statement, and then back to the top:"
  , "            "
  , "            unie> trans $let { x = 1; y = 2 } in x$"
  , "            Information: transformation started."
  , "            let x = 1"
  , "                y = 2"
  , "            in x"
  , "            [1]> left"
  , "            \8801 x = 1"
  , "            [2]> next"
  , "            \8801 y = 2"
  , "            [3]> top"
  , "            \8801"
  , "            let x = 1"
  , "                y = 2"
  , "            in x"
  , "    "
  , "        Focussing on the argument of an application, and then back to the top:"
  , "            "
  , "            unie> trans $(\955x.\955y.x) a$"
  , "            Information: transformation started."
  , "            (\955x.\955y.x) a"
  , "            [1]> right"
  , "            \8801 a"
  , "            [2]> top"
  , "            \8801 (\955x.\955y.x) a"
  , "    "
  , "NOTES"
  , "        top is only available when UNIE is in TRANS or TRANSCRIPT mode."
  , "    "
  , "SEE ALSO"
  , "        up"
  ]

showScriptsCmd :: [String]
showScriptsCmd  =
  [ "NAME"
  , "        show-scripts - displays the names of all scripts in UNIE's library of"
  , "                       scripts."
  , "SYNOPSIS"
  , "        show-scripts"
  , "    "
  , "DESCRIPTION"
  , "    "
  , "OPTIONS"
  , "    "
  , "    "
  , "EXAMPLES"
  , "    "
  , "NOTES"
  , "    "
  , "SEE ALSO"
  ]

showScriptCmd :: [String]
showScriptCmd  =
  [ "NAME"
  , "        show-script - displays the sequence of commands that make up"
  , "                      a particular command script."
  , "SYNOPSIS"
  , "        show-script NAME"
  , "            displays the sequence of commands that make up the command script "
  , "            saved under the specified name."
  , "    "
  , "DESCRIPTION"
  , "    "
  , "OPTIONS"
  , "    "
  , "    "
  , "EXAMPLES"
  , "    "
  , "NOTES"
  , "    "
  , "SEE ALSO"
  ]

showLibCmd :: [String]
showLibCmd  =
  [ "NAME"
  , "        show-lib - displays the contents of UNIE's library of definitions."
  , "    "
  , "SYNOPSIS"
  , "        show-lib [OPTION]"
  , "    "
  , "DESCRIPTION"
  , "    "
  , "OPTIONS"
  , "        If no option is specified, the identifiers of all context and term "
  , "        bindings are displayed, followed by all cost-equivalent context "
  , "        patterns."
  , "    "
  , "        CTX_KIND"
  , "                Displays cost-equivalent context patterns of the specified "
  , "                context kind."
  , "        SRC_NAME"
  , "                Displays the binding whose identifier matches the specified "
  , "                source name."
  , "        -ctxs   Displays the identifiers of all context bindings."
  , "        -ctx-eqs"
  , "                Displays all cost-equivalent context patterns."
  , "        -defs   Displays the identifiers of all context and term bindings."
  , "        -terms  Displays the identifiers of all term bindings."
  , "    "
  , "EXAMPLES"
  , "    "
  , "        Adding and showing a term binding:"
  , "    "
  , "            unie> add-lib $foo = \\x.x$"
  , "            Information: library updated."
  , "            unie> show-lib 'foo"
  , "            foo = \\x.x"
  , "    "
  , "NOTES"
  , "    "
  , "SEE ALSO"
  , "        CTX_KIND, SRC_NAME"
  ]

showActiveScriptCmd :: [String]
showActiveScriptCmd  =
  [ "NAME"
  , "        show-active-script - displays the sequence of commands that make up"
  , "                             the active command script."
  , "SYNOPSIS"
  , "        show-active-script"
  , "    "
  , "DESCRIPTION"
  , "    "
  , "OPTIONS"
  , "    "
  , "    "
  , "EXAMPLES"
  , "    "
  , "NOTES"
  , "        The command to be executed next is highlighted."
  , "    "
  , "        show-active-script is only available when UNIE is in SCRIPT or "
  , "        TRANSCRIPT mode."
  , "    "
  , "SEE ALSO"
  , "        SCRIPT, TRANSCRIPT"
  ]

rightCmd :: [String]
rightCmd  =
  [ "NAME"
  , "        right - moves the focus to the current node's right child node."
  , "    "
  , "SYNOPSIS"
  , "        right"
  , "    "
  , "DESCRIPTION"
  , "    "
  , "OPTIONS"
  , "    "
  , "EXAMPLES"
  , "        "
  , "        Focussing on a lambda's body:"
  , "            "
  , "            unie> trans $\955x.\955y.x$"
  , "            Information: transformation started."
  , "            \955x.\955y.x"
  , "            [1]> right"
  , "            \8801 \955y.x"
  , "    "
  , "        Focussing on the first alternative of a case statement:"
  , "            "
  , "            unie> trans $case xs of { (y :: ys) \10142 y; [] \10142 \"error\" } $"
  , "            Information: transformation started."
  , "            case xs of "
  , "             (y :: ys) \10142 y"
  , "             []        \10142 \"error\""
  , "            [1]> right"
  , "            \8801 (y :: ys) \10142 y"
  , "    "
  , "        Focussing on an application's argument:"
  , "            "
  , "            unie> trans $(\955x.\955y.x) a$"
  , "            Information: transformation started."
  , "            (\955x.\955y.x) a"
  , "            [1]> right"
  , "            \8801 a"
  , "    "
  , "NOTES"
  , "        right is only available when UNIE is in TRANS or TRANSCRIPT mode."
  , "    "
  , "SEE ALSO"
  , "        left, next, prev, rhs"
  ]

rhsCmd :: [String]
rhsCmd  =
  [ "NAME"
  , "        rhs - moves the focus to the right-hand side of a let binding or case "
  , "              alternative."
  , "    "
  , "SYNOPSIS"
  , "        rhs"
  , "    "
  , "DESCRIPTION"
  , "    "
  , "OPTIONS"
  , "    "
  , "EXAMPLES"
  , "        "
  , "        Focussing on the right-hand side of a let binding:"
  , "            "
  , "            unie> trans $let { x = 1; y = 2 } in x$"
  , "            Information: transformation started."
  , "            let x = 1"
  , "                y = 2"
  , "            in x"
  , "            [1]> left"
  , "            \8801 x = 1"
  , "            [2]> rhs"
  , "            \8801 1"
  , "           "
  , "        Focussing on the right-hand side of a case alternative:"
  , "            "
  , "            unie> trans $case xs of { (y :: ys) \10142 y; [] \10142 \"error\" } $"
  , "            Information: transformation started."
  , "            case xs of "
  , "             (y :: ys) \10142 y"
  , "             []        \10142 \"error\""
  , "            [1]> right"
  , "            \8801 (y :: ys) \10142 y"
  , "            [2]> rhs"
  , "            \8801 y"
  , "    "
  , "NOTES"
  , "        rhs is only available when UNIE is in TRANS or TRANSCRIPT mode, and"
  , "        when focussed on a let binding or case alternative."
  , "    "
  , "SEE ALSO"
  , "        left, next, prev, right"
  ]

reloadActiveScriptCmd :: [String]
reloadActiveScriptCmd  =
  [ "NAME"
  , "        reload-active-script - sets the command to be executed next as the "
  , "                               active script's first command."
  , "SYNOPSIS"
  , "        reload-active-script"
  , "    "
  , "DESCRIPTION"
  , "    "
  , "OPTIONS"
  , "    "
  , "    "
  , "EXAMPLES"
  , "    "
  , "NOTES"
  , "        reload-active-script is only available when UNIE is in SCRIPT or "
  , "        TRANSCRIPT mode."
  , "    "
  , "SEE ALSO"
  , "        SCRIPT, TRANSCRIPT"
  ]

quitCmd :: [String]
quitCmd  =
  [ "\ESC[1mNAME\ESC[m"
  , "        quit - quits the system."
  , "  "
  , "\ESC[1mSYNOPSIS\ESC[m"
  , "        quit"
  , "   "
  , "   "
  , "October 2017."
  ]

pROPCmd :: [String]
pROPCmd  =
  [ "\ESC[1mNAME\ESC[m    PROP - a proof proposition."
  , "    "
  , "\ESC[1mDESCRIPTION\ESC[m"
  , "        Proof propositions can be passed as arguments to UNIE's trans "
  , "        command. They are used to initiate a program transformation that "
  , "        corresponds to an improvement proof."
  , "   "
  , "        Supplying a proposition will initialise the global relation"
  , "        and transformation goal for that proof."
  , "   "
  , "        The global relation G will ensure that the operator of any "
  , "        transformation rule applied during that proof implies G."
  , "   "
  , "        The user will be notified when the goal is reached. "
  , "          "
  , "\ESC[1mSYNTAX\ESC[m  Proof propositions have the following syntax:"
  , "    "
  , "        <TERM_SRC_CODE | TERM_SRC_NAME> "
  , "    "
  , "                     <REL> "
  , "    "
  , "        <TERM_SRC_CODE | TERM_SRC_NAME>"
  , "     "
  , "\ESC[1mEXAMPLES\ESC[m"
  , "        $x$ I $y$"
  , "       "
  , "        'foo WCE 'bar"
  , "     "
  , "        'foo WI $let x = 1 in x$"
  , "           "
  , "        $\955x.x CE 'bar"
  , "      "
  , "\ESC[1mSEE ALSO\ESC[m"
  , "        REL, TERM_SRC_CODE, TERM_SRC_NAME"
  , "    "
  , "    "
  , "October 2017."
  ]

prevCmdCmd :: [String]
prevCmdCmd  =
  [ "NAME"
  , "        prev-cmd - sets the command to be executed next as the previous"
  , "                   command in the active script."
  , "    "
  , "SYNOPSIS"
  , "        prev-cmd"
  , "    "
  , "DESCRIPTION"
  , "    "
  , "OPTIONS"
  , "    "
  , "    "
  , "EXAMPLES"
  , "    "
  , "NOTES"
  , "        prev-cmd is only available when UNIE is in SCRIPT or TRANSCRIPT mode."
  , "    "
  , "SEE ALSO"
  , "        next-cmd, SCRIPT, TRANSCRIPT"
  ]

prevCmd :: [String]
prevCmd  =
  [ "NAME"
  , "        prev - moves the focus to the previous let binding or case alternative."
  , "    "
  , "SYNOPSIS"
  , "        prev"
  , "    "
  , "DESCRIPTION"
  , "    "
  , "OPTIONS"
  , "    "
  , "EXAMPLES"
  , "        "
  , "        Focussing on the previous let binding:"
  , "            "
  , "            unie> trans $let { x = 1; y = 2 } in x$"
  , "            Information: transformation started."
  , "            let x = 1"
  , "                y = 2"
  , "            in x"
  , "            [1]> left"
  , "            \8801 x = 1"
  , "            [2]> next"
  , "            \8801 y = 2"
  , "            [3]> prev"
  , "            \8801 x = 1"
  , "    "
  , "        Focussing on the previous case alternative:"
  , "            "
  , "            unie> trans $case xs of { (y :: ys) \10142 y; [] \10142 \"error\" } $"
  , "            Information: transformation started."
  , "            case xs of "
  , "             (y :: ys) \10142 y"
  , "             []        \10142 \"error\""
  , "            [1]> right"
  , "            \8801 (y :: ys) \10142 y"
  , "            [2]> next"
  , "            \8801 [] \10142 \"error\""
  , "            [3]> prev"
  , "            \8801 (y :: ys) \10142 y"
  , "    "
  , "    "
  , "NOTES"
  , "        prev is only available when UNIE is in TRANS or TRANSCRIPT mode, and"
  , "        when focussed on a let binding or case alternative."
  , "    "
  , "SEE ALSO"
  , "        left, next, rhs, right"
  ]

nextCmdCmd :: [String]
nextCmdCmd  =
  [ "NAME"
  , "        next-cmd - sets the command to be executed next as the subsequent "
  , "                   command in the active script."
  , "    "
  , "SYNOPSIS"
  , "        next-cmd"
  , "    "
  , "DESCRIPTION"
  , "    "
  , "OPTIONS"
  , "    "
  , "    "
  , "EXAMPLES"
  , "    "
  , "NOTES"
  , "        next-cmd is only available when UNIE is in SCRIPT or TRANSCRIPT mode."
  , "    "
  , "SEE ALSO"
  , "        prev-cmd, SCRIPT, TRANSCRIPT"
  ]

nextCmd :: [String]
nextCmd  =
  [ "NAME"
  , "        next - moves the focus to the next let binding or case alternative."
  , "    "
  , "SYNOPSIS"
  , "        next"
  , "    "
  , "DESCRIPTION"
  , "    "
  , "OPTIONS"
  , "    "
  , "EXAMPLES"
  , "        "
  , "        Focussing on the next let binding:"
  , "            "
  , "            unie> trans $let { x = 1; y = 2 } in x$"
  , "            Information: transformation started."
  , "            let x = 1"
  , "                y = 2"
  , "            in x"
  , "            [1]> left"
  , "            \8801 x = 1"
  , "            [2]> next"
  , "            \8801 y = 2"
  , "           "
  , "        Focussing on the next case alternative:"
  , "            "
  , "            unie> trans $case xs of { (y :: ys) \10142 y; [] \10142 \"error\" } $"
  , "            Information: transformation started."
  , "            case xs of "
  , "             (y :: ys) \10142 y"
  , "             []        \10142 \"error\""
  , "            [1]> right"
  , "            \8801 (y :: ys) \10142 y"
  , "            [2]> next"
  , "            \8801 [] \10142 \"error\""
  , "    "
  , "NOTES"
  , "        next is only available when UNIE is in TRANS or TRANSCRIPT mode, and"
  , "        when focussed on a let binding or case alternative."
  , "    "
  , "SEE ALSO"
  , "        left, prev, rhs, right"
  ]

mODECmd :: [String]
mODECmd  =
  [ "\ESC[1mNAME\ESC[m    MODE - UNIE's different modes of operation."
  , "    "
  , "\ESC[1mDESCRIPTION\ESC[m"
  , "        UNIE has four different modes of operation, which it transitions"
  , "        between automatically when various commands are invoked by the user:"
  , "    "
  , "        INITIAL"
  , "                UNIE's base mode of operation. UNIE starts in this mode,"
  , "                and will return to it each time it starts up."
  , "        TRANS"
  , "                UNIE enters its transformation mode when a term is being "
  , "                transformed. A transformation is initiated using the "
  , "                trans command. UNIE leaves this mode when the user ends a "
  , "                transformation using end-trans."
  , "        SCRIPT"
  , "                UNIE enters its script mode when a script is run using the"
  , "                run-script or load-script commands. Script mode is exited"
  , "                when the last active script is closed by with the exit-script "
  , "                command."
  , "    "
  , "        TRANSCRIPT"
  , "                TRANSCRIPT = TRANS + SCRIPT."
  , "    "
  , "        The current mode of operation dictates how UNIE responds to certain "
  , "        commands. For example, navigation commands such as left and right"
  , "        are only available during TRANS or TRANSCRIPT mode, as they are used"
  , "        to navigate the AST of a term being transformed. Similarly exit-script"
  , "        is only available if a script is active i.e., when UNIE is in SCRIPT or"
  , "        TRANSCRIPT mode. Some commands are available in all modes of operation, "
  , "        for example, the quit command."
  , "    "
  , "        The information displayed by UNIE also depends on its current mode of "
  , "        operation. In its TRANS or TRANSCRIPT mode, UNIE will display the"
  , "        focussed term under transformation, either in isolation from the "
  , "        remainder of the AST, or highlighted in position, depending on the "
  , "        highlighting settings selected by the user. In SCRIPT mode, the active"
  , "        script will be displayed at the top of the terminal, along with the"
  , "        name of the script command that will be executed next."
  , "    "
  , "        An important point regarding special input. In INITIAL mode, if the "
  , "        user presses the return key without specifying any input, UNIE"
  , "        will simply echo an empty line back at them (just as if they were in"
  , "        a standard shell). However, when in SCRIPT OR TRANSCRIPT mode, pressing "
  , "        the return key without any input will execute the next script command."
  , "    "
  , "        Note the user cannot manually instruct UNIE to enter a particular"
  , "        mode of operation. Rather these transitions should be seen as"
  , "        side effects of invoked commands."
  , "   "
  , "   "
  , "October 2017."
  ]

leftCmd :: [String]
leftCmd  =
  [ "NAME"
  , "        left - moves the focus to the current node's left child node."
  , "    "
  , "SYNOPSIS"
  , "        left"
  , "    "
  , "DESCRIPTION"
  , "    "
  , "OPTIONS"
  , "    "
  , "EXAMPLES"
  , "        "
  , "        Focussing on an application's function:"
  , "            "
  , "            unie> trans $(\955x.\955y.x) a$"
  , "            Information: transformation started."
  , "            (\955x.\955y.x) a"
  , "            [1]> left"
  , "            \8801 (\955x.\955y.x)"
  , "    "
  , "        Focussing on a case statement's scrutinee:"
  , "            "
  , "            unie> trans $case xs of { (y :: ys) \10142 y; [] \10142 \"error\" } $"
  , "            Information: transformation started."
  , "            case xs of "
  , "             (y :: ys) \10142 y"
  , "             []        \10142 \"error\""
  , "            [1]> left"
  , "            \8801 xs"
  , "    "
  , "        Focussing on a let statement's first binding:"
  , "            "
  , "            unie> trans $let { x = 1; y = 2 } in x$"
  , "            Information: transformation started."
  , "            let x = 1"
  , "                y = 2"
  , "            in x"
  , "            [1]> left"
  , "            \8801 x = 1"
  , "    "
  , "NOTES"
  , "        left is only available when UNIE is in TRANS or TRANSCRIPT mode."
  , "    "
  , "SEE ALSO"
  , "        next, prev, rhs, right"
  ]

importScriptCmd :: [String]
importScriptCmd  =
  [ "NAME"
  , "        import-script - imports a command script into UNIE's library of scripts."
  , "    "
  , "SYNOPSIS"
  , "        import-script NAME FILE_PATH"
  , "            Imports the script at the specified filepath and saves it under the "
  , "            specified name. "
  , "    "
  , "DESCRIPTION"
  , "    "
  , "OPTIONS"
  , "    "
  , "EXAMPLES"
  , "    "
  , "NOTES"
  , "    "
  , "SEE ALSO"
  , "        FILE_PATH, NAME, show-script, show-scripts"
  ]

importLibCmd :: [String]
importLibCmd  =
  [ "NAME"
  , "        import-lib - imports bindings and context patterns into UNIE's library "
  , "                     of definitions from file."
  , "    "
  , "SYNOPSIS"
  , "        import-lib FILE_PATH [OPTION]"
  , "    "
  , "DESCRIPTION"
  , "    "
  , "OPTIONS"
  , "        If no option is specified, the file is assumed to contain both context "
  , "        and term bindings, and they are imported accordingly."
  , "    "
  , "        CTX_KIND"
  , "                Imports cost-equivalent context patterns under the assumption "
  , "                that they are of the specified context kind."
  , "        -ctxs   Imports context bindings."
  , "        -terms  Imports term bindings."
  , "    "
  , "EXAMPLES"
  , "    "
  , "NOTES"
  , "    "
  , "SEE ALSO"
  , "        CTX_KIND, FILE_PATH "
  ]

highlightCmd :: [String]
highlightCmd  =
  [ "\ESC[1mNAME\ESC[m"
  , "        highlight - turns focus highlighting on and off."
  , "  "
  , "\ESC[1mSYNOPSIS\ESC[m"
  , "        highlight [OPTION]"
  , "  "
  , "\ESC[1mOPTIONS\ESC[m"
  , "        on  Turns focus highlighting on."
  , "        off Turns focus highlighting off."
  , "  "
  , "\ESC[1mEXAMPLES\ESC[m"
  , "        Turning focus highlighting on, navigating to a let "
  , "        statement's second binding, and then turning focus"
  , "        highlighting off."
  , "     "
  , "            unie> trans $let { x = 1; y = 2 } in x$"
  , "            let x = 1"
  , "                y = 2"
  , "            in x"
  , "            [1]> highlight on"
  , "            Info: focus highlighting on."
  , "            \ESC[30m\ESC[48;5;252mlet x = 1\ESC[m"
  , "                \ESC[30m\ESC[48;5;252my = 2\ESC[m"
  , "            \ESC[30m\ESC[48;5;252min x\ESC[m"
  , "            [1]> left"
  , "            \8801"
  , "            let \ESC[30m\ESC[48;5;252mx = 1\ESC[m"
  , "                y = 2"
  , "            in x"
  , "            [2]> next"
  , "            \8801"
  , "            let x = 1"
  , "                \ESC[30m\ESC[48;5;252my = 2\ESC[m"
  , "            in x"
  , "            [2]> highlight off"
  , "            \8801 y = 2"
  , "     "
  , "\ESC[1mNOTES\ESC[m   highlight is only available when UNIE is in TRANS or "
  , "        TRANSCRIPT MODE."
  , "   "
  , "\ESC[1mSEE ALSO\ESC[m"
  , "        MODE, zoom-in, zoom-out"
  , "           "
  , "   "
  , "October 2017."
  ]

hELP_MENUCmd :: [String]
hELP_MENUCmd  =
  [ "\ESC[1mNAME\ESC[m    HELP_MENU - the help menu options."
  , "    "
  , "\ESC[1mDESCRIPTION\ESC[m"
  , "        The help menu options are as follows:"
  , "    "
  , "        <TO-DO>"
  , "    "
  , "        Navigation"
  , "        Contexts"
  , "        Rewrites"
  , "        Cost-equivalent contexts"
  , "        Scripts"
  , "        Exporting/importing to/from files"
  , "    "
  , "   "
  , "October 2017."
  ]

helpCmd :: [String]
helpCmd  =
  [ "\ESC[1mNAME\ESC[m    help - prints help menus."
  , "      "
  , "\ESC[1mSYNOPSIS\ESC[m"
  , "        help [OPTION]"
  , "     "
  , "\ESC[1mOPTIONS\ESC[m"
  , "        If no option is specified, the main help menu is printed."
  , "    "
  , "        HELP_MENU"
  , "                Displays the specified help menu."
  , "   "
  , "\ESC[1mEXAMPLES\ESC[m"
  , "        help"
  , "        help CONTEXTS"
  , "        help NAVIGATION"
  , "        help SCRIPTS"
  , "  "
  , "\ESC[1mSEE ALSO\ESC[m"
  , "        HELP_MENU"
  , "   "
  , "   "
  , "October 2017."
  ]

exportScriptCmd :: [String]
exportScriptCmd  =
  [ "NAME"
  , "        export-script - exports the sequence of successfully entered commands "
  , "                        currently stored in UNIE's transformation environment to "
  , "                        file as a command script."
  , "    "
  , "SYNOPSIS"
  , "        export-script FILE_PATH"
  , "    "
  , "DESCRIPTION"
  , "    "
  , "OPTIONS"
  , "    "
  , "    "
  , "EXAMPLES"
  , "    "
  , "NOTES"
  , "        export-script is only available when UNIE is in TRANS or TRANSCRIPT "
  , "        mode."
  , "    "
  , "SEE ALSO"
  , "        FILE_PATH"
  ]

exportLibCmd :: [String]
exportLibCmd  =
  [ "NAME"
  , "        export-lib - exports bindings or context patterns from UNIE's library"
  , "                     of definitions to file."
  , "    "
  , "SYNOPSIS"
  , "        export-lib FILE_PATH [OPTION]"
  , "    "
  , "DESCRIPTION"
  , "    "
  , "OPTIONS"
  , "        If no option is specified, all context and term bindings are exported "
  , "        to the specified file."
  , "    "
  , "        CTX_KIND "
  , "                Exports cost-equivalent context patterns of the specified "
  , "                context kind."
  , "        -ctxs   Exports all context bindings."
  , "        -terms  Exports all term bindings."
  , "     "
  , "EXAMPLES"
  , "    "
  , "NOTES"
  , "    "
  , "SEE ALSO"
  , "        CTX_KIND, FILE_PATH"
  ]

exitScriptCmd :: [String]
exitScriptCmd  =
  [ "\ESC[1mNAME\ESC[m"
  , "        exit-script - exits the active script."
  , "          "
  , "\ESC[1mSYNOPSIS\ESC[m"
  , "        exit-script"
  , "        "
  , "\ESC[1mNOTES\ESC[m   exit-script is only available when UNIE is in SCRIPT or "
  , "        TRANSCRIPT MODE."
  , "              "
  , "\ESC[1mSEE ALSO\ESC[m"
  , "        MODE, load-script, run-script"
  , "     "
  , "    "
  , "October 2017."
  ]

endTransCmd :: [String]
endTransCmd  =
  [ "\ESC[1mNAME\ESC[m    end-trans - ends the current program transformation."
  , "    "
  , "\ESC[1mSYNOPSIS\ESC[m"
  , "        end-trans"
  , "     "
  , "\ESC[1mNOTES\ESC[m   end-trans is only available when UNIE is in "
  , "        TRANS or TRANSCRIPT MODE."
  , "             "
  , "\ESC[1mSEE ALSO\ESC[m"
  , "        MODE, trans"
  , "   "
  , "    "
  , "October 2017."
  ]

delLibCmd :: [String]
delLibCmd  =
  [ "NAME"
  , "        del-lib - deletes bindings or context patterns from UNIE's library of "
  , "                  definitions."
  , "    "
  , "SYNOPSIS"
  , "        del-lib [OPTION]"
  , "    "
  , "DESCRIPTION"
  , "    "
  , "OPTIONS"
  , "        SRC_NAME"
  , "                Deletes the binding whose identifier matches the specified "
  , "                source name."
  , "        CTX_KIND "
  , "                Deletes cost-equivalent context patterns of the specified"
  , "                context kind."
  , "        CTX_KIND IDX"
  , "                Deletes a cost-equivalent context pattern of the specified"
  , "                context kind by index."
  , "        -ctxs   Deletes all context bindings."
  , "        -ctx-eqs"
  , "                Deletes all cost-equivalent context patterns."
  , "        -terms  Deletes all term bindings."
  , "    "
  , "EXAMPLES"
  , "    "
  , "        Adding and deleting a term binding:"
  , "          "
  , "            unie> add-lib $foo = \\x.x$"
  , "            Information: library has been updated."
  , "            unie> del-lib 'foo"
  , "            Information: library has been updated."
  , "    "
  , "        Deleting all applicative cost-equivalent context patterns:"
  , "           "
  , "            unie> del-lib APP"
  , "            Information: library updated."
  , "    "
  , "NOTES"
  , "        Use show-lib CTX_KIND to find the appropriate index to use in"
  , "        conjunction with del-lib CTX_KIND IDX."
  , "    "
  , "SEE ALSO"
  , "        CTX_KIND, IDX, show-lib"
  ]

defineCmd :: [String]
defineCmd  =
  [ "\ESC[1mNAME\ESC[m"
  , "        define - uses the term under transformation to define a binding to add "
  , "                 to UNIE's library of definitions. Once added, the new binding "
  , "                 is subsequently unapplied."
  , "    "
  , "SYNOPSIS"
  , "        define [OPTION]"
  , "    "
  , "DESCRIPTION"
  , "    "
  , "OPTIONS"
  , "        TERM_SRC_NAME"
  , "                Uses the term under transformation as the binding's associated "
  , "                definition and the specified source name as the binding's "
  , "                identifier."
  , "        CVAR    Uses the CVAR's substitution to calculate a context definition"
  , "                from the term under transformation. The CVAR's kind prefix"
  , "                and identifier are then used in conjunction with this definition "
  , "                to define the context binding."
  , "    "
  , "EXAMPLES"
  , "    "
  , "        Defining a term binding:"
  , "    "
  , "            unie> trans $\\x.x$"
  , "            Information: transformation started."
  , "            \\x.x"
  , "            [1]> define 'foo"
  , "            Information: library updated."
  , "            \8801 foo"
  , "            [2]> show-lib 'foo"
  , "            foo = \\x.x"
  , "    "
  , "        Defining a context binding:"
  , "    "
  , "            unie> trans $\\x.x$"
  , "            Information: transformation started."
  , "            \\x.x"
  , "            [1]> define $V_Foo[x]$"
  , "            Information: library updated."
  , "            \8801 V_Foo[x]"
  , "            [2]> show-lib 'Foo"
  , "            V_Foo = \\x.[-]"
  , "    "
  , "NOTES   "
  , "        define is only available when UNIE is in TRANS or TRANSCRIPT mode."
  , "    "
  , "SEE ALSO"
  , "        CVAR, TERM_SRC_NAME, TRANS, TRANSCRIPT, unapply"
  ]

betaAllCmd :: [String]
betaAllCmd  =
  [ "\ESC[1mNAME\ESC[m    beta-all - (repeated) beta reduction for curried functions."
  , "    "
  , "\ESC[1mRELATION\ESC[m "
  , "        cost-equivalent: \8818\8819 "
  , "    "
  , "\ESC[1mSYNOPSIS\ESC[m"
  , "        beta-all"
  , "    "
  , "\ESC[1mDESCRIPTION\ESC[m"
  , "        In the case where a (curried) function is applied to multiple arguments, "
  , "        beta-all will apply beta reduction to the nested application repeatedly "
  , "        until all arguments have been consumed:"
  , "    "
  , "         (1) Beta reduce inner application"
  , "               "
  , "          \ESC[30m\ESC[48;5;252m(\955x.\955y.x) a\ESC[m b"
  , "    "
  , "         (2) Beta reduce outer application"
  , "            "
  , "          \ESC[30m\ESC[48;5;252m(\955y.a) b\ESC[m"
  , "    "
  , "         (3) Result"
  , "    "
  , "          \8818\8819 a"
  , "    "
  , "        Note that the given number of arguments must be less than or equal to "
  , "        the arity of the function, otherwise the command will fail. (I.e.,"
  , "        partial/full application is allowed). "
  , "   "
  , "\ESC[1mEXAMPLES\ESC[m"
  , "    "
  , "    Correct application of beta-all:"
  , "    "
  , "        unie> trans $(\955x.\955y.x) a b$"
  , "        (\955x.\955y.x) a b"
  , "        [1]> beta-all"
  , "        \8818\8819 a"
  , "    "
  , "    Incorrect applications of beta-all:"
  , "    "
  , "        unie> trans $x$"
  , "        x"
  , "        [1]> beta-all"
  , "        Error: not a function application."
  , "    "
  , "        unie> trans $(\955x.\955y.x) a b c$"
  , "        (\955x.\955y.x) a b c"
  , "        [1]> beta-all"
  , "        Error: invalid function application [too many arguments]."
  , "    "
  , "\ESC[1mNOTES\ESC[m"
  , "        beta-all is only available when the system is in TRANS or TRANSCRIPT mode."
  , "    "
  , "\ESC[1mSEE ALSO\ESC[m"
  , "        beta, unbeta"
  ]

betaCmd :: [String]
betaCmd  =
  [ "\ESC[1mNAME\ESC[m    beta - beta reduction."
  , "    "
  , "\ESC[1mRELATION\ESC[m "
  , "        cost-equivalent: \8818\8819 "
  , "    "
  , "\ESC[1mSYNOPSIS\ESC[m"
  , "        beta "
  , "   "
  , "\ESC[1mEXAMPLES\ESC[m"
  , "    "
  , "    Correct application of beta:"
  , "    "
  , "        unie> trans $(\955x.x) a$"
  , "        (\955x.x) a"
  , "        [1]> beta"
  , "        \8818\8819 a"
  , "    "
  , "    Incorrect applications of beta:"
  , "    "
  , "        unie> trans $x$"
  , "        x"
  , "        [1]> beta"
  , "        Error: not a redex."
  , "    "
  , "        unie> trans $(\955x.\955y.x) a b$"
  , "        (\955x.\955y.x) a b"
  , "        [1]> beta               -- beta-all is valid here, but beta isn't."
  , "        Error: not a redex.   "
  , "        [1]> left               -- Instead, nav. to a redex to use beta."
  , "        \8801 (\955x.\955y.x) a"
  , "        [2]> beta"
  , "        \8818\8819 \955y.a"
  , "    "
  , "\ESC[1mNOTES\ESC[m"
  , "        beta is only available when the system is in TRANS or TRANSCRIPT mode."
  , "    "
  , "\ESC[1mSEE ALSO\ESC[m"
  , "        beta-all, unbeta"
  ]

addLibCmd :: [String]
addLibCmd  =
  [ "NAME"
  , "        add-lib - adds a binding or context pattern to UNIE's library of "
  , "                  definitions."
  , "    "
  , "SYNOPSIS"
  , "        add-lib [OPTION]"
  , "    "
  , "DESCRIPTION"
  , "    "
  , "OPTIONS"
  , "        CTX_BINDING"
  , "                Adds the specified context binding."
  , "        CTX_KIND CTX_PAT"
  , "                Adds the specified cost-equivalent context pattern under the"
  , "                assumption that it is of the specified context kind."
  , "        TERM_BINDING"
  , "                Adds the specified term binding."
  , "    "
  , "EXAMPLES"
  , "    "
  , "        Adding a context binding:"
  , "    "
  , "            unie> add-lib $V_Foo = \\x.[-]$"
  , "            Information: library updated."
  , "    "
  , "        Adding a term binding:"
  , "    "
  , "            unie> add-lib $foo = \\x.x$"
  , "            Information: library updated."
  , "    "
  , "        Adding an evaluation cost-equivalent context pattern:"
  , "    "
  , "            unie> add-lib EVAL $[-] ++ _$"
  , "            Information: library updated."
  , "    "
  , "NOTES"
  , "        When added, a binding will overwrite a previous binding with the same "
  , "        identifier without warning."
  , "    "
  , "SEE ALSO"
  , "        CTX_BINDING, CTX_KIND, CTX_PAT, TERM_BINDING"
  ]
