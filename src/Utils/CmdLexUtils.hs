{-# LANGUAGE FlexibleInstances #-}

module CmdLexUtils
  ( Token(..)        -- Tokens for capturing raw command input.
  , LocatedToken(..) -- Tokens with location information.
  , Pos(..)          -- Position information (line/col number).
  , LexError(..)     -- Lexical errors generated by Alex.
  ) where

import PPLib         (Outputable, ppr)
import PrintSettings (terminalLineStyle)
import Text.PrettyPrint.HughesPJ
  ( (<+>)
  , (<>)
  , char
  , empty
  , hsep
  , int
  , renderStyle
  , sep
  , text
  )

{-
  Information:
  -----------------------------------------------------------------------------
  - Datatype of tokens for raw command input (i.e., commands and parameters);
  - Also a number of helper functions associated with the Token datatype.
  - Command input by the user is lexed into tokens before being parsed into
    executable commands;
  - This allows precise errors to be reported regarding invalid commands/
    their parameters;
  - Lexical errors may occur from invalid/malformed input, e.g., if a closing
    source code delimiter is omitted: $\x.x.
-}

-- Tokens capturing raw command input.
data Token
  = SrcName String
  | SrcCode String
  | CmdName String
  | Prop Token Token Token
  | Number Int
  | File FilePath
  -- Separates sequences of tokens relating to individual commands
  | CmdSep
    deriving Eq

-- LocatedToken = token + position info (line/col number.)
data LocatedToken = LocatedToken { tok :: Token, pos :: Pos } deriving Eq
data Pos = Pos { lineNo :: Int, colNo :: Int } deriving Eq

-- Lexical error generated by Alex.
data LexError = LexError { ePos     :: Pos
                         , curStr   :: String
                         , prevChar :: Char
                         }

-- Printing: ------------------------------------------------------------------

-- None of the below code is interesting, it's just formatting: --
-- Note we re-insert delimiters as per CmdAST.

instance Outputable LexError where
  ppr (LexError p str _) = hsep [ppr p, char '\''
                            <> text str <> char '\'']

instance Outputable Pos where
  ppr (Pos l c) = int l <> char ':' <> int c <> char ':'

instance Outputable LocatedToken where
  ppr (LocatedToken t p) = hsep [ppr p, ppr t]

instance Outputable [LocatedToken] where
  ppr []         = empty
  ppr (lt : lts) = sep [ppr lt, ppr lts]

instance Outputable Token where
  ppr (CmdName s)     = text s
  ppr (SrcCode s)     = char '$' <> text s <> char '$'
  ppr (SrcName s)     = char '\'' <> text s
  ppr (Number i)      = int i
  ppr (File fp)       = text fp
  ppr CmdSep          = char '\n'
  ppr (Prop t1 t2 t3) = sep [ppr t1, ppr t2, ppr t3]

instance Outputable [Token] where
  ppr []       = empty
  ppr (t : ts) = ppr t <+> ppr ts

-- Show instances => assume displayed in the terminal: --

instance Show LexError where
  show = renderStyle terminalLineStyle . ppr

instance Show Pos where
  show = renderStyle terminalLineStyle . ppr

instance Show LocatedToken where
  show = renderStyle terminalLineStyle . ppr

instance Show Token where
  show = renderStyle terminalLineStyle . ppr
